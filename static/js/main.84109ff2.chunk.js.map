{"version":3,"sources":["components/SidebarOption.js","components/Nav.js","components/TweetBox.js","components/Post.js","components/Tweets.js","components/Widgets.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","text","Icon","className","Nav","HomeOutlinedIcon","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListIcon","PersonOutlineOutlinedIcon","MoreHorizIcon","Button","id","TweetBox","Avatar","src","placeholder","type","Post","displayName","userName","verified","image","avatar","alt","fontSize","Tweets","Widgets","tweetId","sourceType","screenName","options","height","url","via","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84109ff2.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/Nav.css'\n\nfunction SidebarOption({active,text, Icon}) {\n    return (\n        <div className={`sidebarOption ${active && 'sidebarOption--active'}`}>\n            <Icon />\n            <h2>{text}</h2>\n        </div>\n    );\n}\n\n\n\nexport default SidebarOption;","import React from 'react';\nimport SidebarOption from \"./SidebarOption\";\nimport '../css/Nav.css'\n\n\n// Import Icons\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\nimport SearchIcon from '@material-ui/icons/Search';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport ListIcon from '@material-ui/icons/List';\nimport PersonOutlineOutlinedIcon from '@material-ui/icons/PersonOutlineOutlined';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\n// Button Import\nimport { Button } from '@material-ui/core';\n\n\nconst Nav = () => {\n    return (\n    <nav className='nav'>\n        <TwitterIcon className='sidebar__twitterIcon'/>\n\n        <SidebarOption active Icon={HomeOutlinedIcon} text=\"Home\" />\n        <SidebarOption Icon={SearchIcon} text=\"Explore\" />\n        <SidebarOption Icon={NotificationsNoneIcon} text=\"Notifications\" />\n        <SidebarOption Icon={MailOutlineIcon} text=\"Messages\" />\n        <SidebarOption Icon={BookmarkBorderIcon} text=\"Bookmarks\" />\n        <SidebarOption Icon={ListIcon} text=\"Lists\" />\n        <SidebarOption Icon={PersonOutlineOutlinedIcon} text=\"Profile\" />\n        <SidebarOption Icon={MoreHorizIcon} text=\"More\" />\n\n        <Button id=\"tweet\">Tweet</Button>\n    </nav>\n    );\n}\n\nexport default Nav;\n","import React from 'react'\nimport \"../css/TweetBox.css\";\nimport { Avatar, Button } from \"@material-ui/core\";\n\nfunction TweetBox() {\n    return (\n        <div className='tweetBox'>\n            <form>\n                <div className='tweetBox__input'>\n                    <Avatar src=\"../Images/avataaars.png\"></Avatar>\n                    <input placeholder=\"What's happening?\"></input>\n                </div>\n                <input className='tweetBox__imageInput'\n                       placeholder=\"Enter image URL\"\n                       type= \"text\"\n                       ></input>\n\n                \n                <Button className=\"tweetBox__tweetButton\">Tweet</Button>\n            </form>\n        </div>\n    )\n}\n\nexport default TweetBox\n","import React from 'react'\nimport \"../css/Post.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport PublishIcon from '@material-ui/icons/Publish';\n\n\n\nfunction Post({\n    displayName,\n    userName,\n    verified,\n    text,\n    image,\n    avatar\n}) {\n    return (\n        <div className=\"post\">\n            <div className=\"post__avatar\">\n                <Avatar src=\"src/Images/avataaars.png\" />\n            </div>\n            <div className=\"post__body\">\n                <div className=\"post__header\">\n                    <div className=\"post__headerText\">\n                        <h3>\n                            Joe Fernette {\"\"}\n                            <span className=\"post__headerSpecial\">\n                            <VerifiedUserIcon className=\"post__badge\" />@JoeFernette\n                            </span>\n                        </h3>\n                    </div>\n                    <div className=\"post__headerDescription\">\n                        <p>This is what I'm writing!</p> \n                    </div>\n                </div>\n                <img src=\"https://media.giphy.com/media/3oEdv39DOrzBRRtEEE/giphy.gif\" alt=\"\" />\n                <div className=\"post__footer\">\n                    <ChatBubbleOutlineIcon fontSize=\"small\" />\n                        <RepeatIcon fontSize=\"small\" />\n                        <FavoriteBorderIcon fontSize=\"small\" />\n                        <PublishIcon fontSize=\"small\" />\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Post\n","import React from 'react';\nimport TweetBox from \"./TweetBox\";\nimport Post from \"./Post\";\nimport \"../css/Tweets.css\";\n\nfunction Tweets() {\n    return (\n        <div className='feed'>\n            {/* Header */}\n            <div className='feed__header'>\n                <h2>Home</h2>\n            </div>\n\n            {/* TweetBox */}\n            <TweetBox />\n\n            {/* Posts */}\n            <Post />\n            <Post />\n            <Post />\n            <Post />\n            <Post />\n            <Post />\n            <Post />\n            {/* Posts */}\n            {/* Posts */}\n            {/* Posts */}\n            {/* Posts */}\n            {/* Posts */}\n            {/* Posts */}\n            {/* Posts */}\n            </div>\n    )\n}\n\nexport default Tweets\n","import React from 'react';\nimport '../css/Widgets.css';\nimport {\n    TwitterShareButton,\n    TwitterTweetEmbed,\n    TwitterTimelineEmbed,\n}   from \"react-twitter-embed\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\n\nfunction Widgets() {\n    return (\n        <div className='widgets'>\n            <div className=\"widgets__input\">\n            <SearchIcon className=\"widgets__searchIcon\" />\n            <input placeholder=\"Search Twitter\" type=\"text\" />\n            </div>\n\n            <div className=\"widgets__widgetContainer\">\n                <h2>What's happening</h2>\n\n                <TwitterTweetEmbed tweetId={\"858551177860055040\"} />\n\n                <TwitterTimelineEmbed\n                    sourceType=\"profile\"\n                    screenName=\"JoeFernette\"\n                    options={{height:400}}\n                />\n\n                <TwitterShareButton\n                    url={\"https://www.facebook.com/joe.fernette\"}\n                    options={{text: \"#reactjs is awsome\", via: \"Joe\"}}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default Widgets\n","import React from 'react';\n//Import Components\nimport Nav from \"./components/Nav\";\nimport Tweets from \"./components/Tweets\";\nimport Widgets from \"./components/Widgets\";\nimport './App.css';\n\n\n\nfunction App() {\n  //Write JavaScript here\n  return (\n    <div className=\"App\">\n      \n      {/* Sidebar */}\n      <Nav /> \n\n      {/* Tweets */}\n      <Tweets />\n\n      {/* {Widgets} */}\n      <Widgets />\n\n      {/* <TopNav className=\"topNav\" /> */}\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}